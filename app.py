import streamlit as st
from PIL import Image
import torch
import os
from utils import get_model, predict_image, analyze_and_draw_defects, device

# --- C·∫§U H√åNH TRANG WEB ---
st.set_page_config(
    page_title="Ph√°t hi·ªán l·ªói v·∫≠t ƒë√∫c",
    page_icon="ü§ñ",
    layout="wide"
)

# --- T·∫¢I MODEL  ---
@st.cache_resource
def load_trained_model(model_path):
    """
    T·∫£i model ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán.
    H√†m n√†y ƒë∆∞·ª£c cache ƒë·ªÉ kh√¥ng ph·∫£i load l·∫°i model m·ªói khi c√≥ t∆∞∆°ng t√°c.
    """
    model = get_model()
    # Load state_dict v·ªõi map_location ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫°y ƒë∆∞·ª£c tr√™n c·∫£ CPU v√† GPU
    model.load_state_dict(torch.load(model_path, map_location=device))
    model.eval()
    return model

# --- GIAO DI·ªÜN CH√çNH ---
st.title("·ª®ng d·ª•ng ph√°t hi·ªán l·ªói tr√™n v·∫≠t ƒë√∫c kim lo·∫°i üî©")
st.write(
    "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng demo! "
    "H√£y t·∫£i l√™n m·ªôt ·∫£nh c·ªßa v·∫≠t ƒë√∫c ƒë·ªÉ ki·ªÉm tra xem n√≥ c√≥ b·ªã l·ªói ('def_front') hay kh√¥ng ('ok_front'). "
    "N·∫øu c√≥ l·ªói, h·ªá th·ªëng s·∫Ω th·ª≠ khoanh v√πng v·ªã tr√≠ c·ªßa l·ªói ƒë√≥."
)
st.markdown("---")

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn model ƒë√£ hu·∫•n luy·ªán
MODEL_PATH = "saved_models/final_model.pth"

# Ki·ªÉm tra xem file model c√≥ t·ªìn t·∫°i kh√¥ng
if not os.path.exists(MODEL_PATH):
    st.error(
        f"Kh√¥ng t√¨m th·∫•y file model t·∫°i '{MODEL_PATH}'. "
        "Vui l√≤ng ch·∫°y file `train.py` ƒë·ªÉ hu·∫•n luy·ªán v√† t·∫°o ra model tr∆∞·ªõc."
    )
else:
    # T·∫£i model
    model = load_trained_model(MODEL_PATH)
    
    # --- Sidebar ƒë·ªÉ upload ·∫£nh ---
    st.sidebar.header("T·∫£i ·∫£nh l√™n")
    uploaded_file = st.sidebar.file_uploader(
        "Ch·ªçn m·ªôt ·∫£nh v·∫≠t ƒë√∫c...", type=["jpg", "jpeg", "png"]
    )

    if uploaded_file is not None:
        image = Image.open(uploaded_file).convert("RGB")

        st.sidebar.image(image, caption="·∫¢nh b·∫°n ƒë√£ t·∫£i l√™n", use_container_width=True)
        st.sidebar.markdown("---")

        if st.sidebar.button("B·∫Øt ƒë·∫ßu ph√¢n t√≠ch"):
            with st.spinner("üß† M√¥ h√¨nh ƒëang ph√¢n t√≠ch, vui l√≤ng ch·ªù..."):
                col1, col2 = st.columns(2)

                with col1:
                    st.subheader("üñºÔ∏è ·∫¢nh g·ªëc")
                    st.image(image, use_container_width=True)

                class_name, confidence = predict_image(model, image)
                
                with col2:
                    st.subheader("üéØ K·∫øt qu·∫£ ph√¢n lo·∫°i")
                    
                    if class_name == 'ok_front':
                        st.success(f"‚úÖ K·∫øt qu·∫£: OK (Kh√¥ng c√≥ l·ªói)")
                    else:
                        st.error(f"‚ùå K·∫øt qu·∫£: C√ì L·ªñI (Defect)")
                    
                    st.metric(label="ƒê·ªô tin c·∫≠y", value=f"{confidence * 100:.2f}%")
                    st.write("---")
                    
                    if class_name == 'def_front':
                        st.subheader("üó∫Ô∏è Ph√¢n t√≠ch chi ti·∫øt v√πng l·ªói")
                        segmented_image, defect_types, defect_count = analyze_and_draw_defects(image)
                        st.image(segmented_image, caption="C√°c v√πng l·ªói ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u (kh√¥ng c√≥ ch·ªØ).", use_container_width=True)
                        st.markdown("---")
                        st.subheader("üìù Chi ti·∫øt c√°c lo·∫°i l·ªói")

                        if defect_count > 0:
                            st.write(f"**T·ªïng s·ªë v√πng l·ªói ph√°t hi·ªán:** {defect_count}")
                            st.write("**Ph√¢n lo·∫°i chi ti·∫øt:**")
                            for i, dtype in enumerate(defect_types, 1):
                                st.markdown(f"- V√πng l·ªói {i}: **{dtype}**")
                        else:
                            st.info("M√¥ h√¨nh ph√°t hi·ªán c√≥ kh·∫£ nƒÉng b·ªã l·ªói, nh∆∞ng kh√¥ng t√¨m th·∫•y v√πng l·ªói r√µ r√†ng b·∫±ng ph√¢n t√≠ch h√¨nh ·∫£nh.")
    else:
        st.info("Vui l√≤ng t·∫£i ·∫£nh l√™n t·ª´ thanh c√¥ng c·ª• b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
